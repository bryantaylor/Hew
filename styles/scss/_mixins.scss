// // Tell respond-min and respond-max to output all media queries by default
//$viewport-width: false !default;

@mixin font-size($size, $line: 1.15) {
    font-size: ($size * 10) + px;
    font-size: $size + rem;
    line-height: $line;
}

// Apply this to your video container to have it scale responsively
// Use 75% for 4:3 videos
@mixin intrinsic-ratio($selector: '.scalable', $ratio: 56.25%) {
    position: relative;
    padding-bottom: $ratio;
    height: 0px;
    margin-bottom: 10px;
    #{$selector} {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 100%;
        height: 100%;
    }
}

@mixin transition($trans: all, $duration: 0.1s, $function: linear) {
    -webkit-transition: $trans $duration $function;
    -moz-transition: $trans $duration $function;
    -o-transition: $trans $duration $function;
    -ms-transition: $trans $duration $function;
    transition: $trans $duration $function;
}

@mixin inline-block($alignment: none) {
    display: inline-block;
    @if $alignment and $alignment != none {
        vertical-align: $alignment; 
    }
    *vertical-align: auto;
    zoom: 1;
    *display: inline;
}

// Tell respond-min and respond-max to output all media queries by default
$viewport-width: false !default;

@mixin respond-min($width) {
    @if $viewport-width {
        @if $viewport-width >= $width {
            @content;    
        }
    }
    @else {
        @media screen and (min-width: $width) {
            @content;
        }
    }
}

@mixin respond-max($width) {
    @if $viewport-width {
        @if $viewport-width <= $width {
            @content;    
        }
    }
    @else {
        @media screen and (max-width: $width) {
            @content;
        }
    }
}

// Required for the rem mixin
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// // Fonts mixin example 
@mixin zimmer($weight) {
    @if $weight == 'regular' {
        font-family: "Zimmer", $sans;
        font-style: normal;
        font-weight: normal;
    }

    @if $weight == 'bold' {
        font-family: 'Zimmer Bold', $sans;
        font-style: normal;
        font-weight: normal;
    }
}

@mixin rem($property, $values...) {
    $max: length($values);
    $pxValues: '';
    $remValues: '';

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $pxValues: #{$pxValues + $value*10}px;

        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }

    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $remValues: #{$remValues + $value}rem;

        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }

    #{$property}: $pxValues;
    #{$property}: $remValues;
}